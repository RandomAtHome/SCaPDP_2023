1) Для начала было решено сделать for версию.
2) Согласно пункту 3.б из условия, есть смысл поднять размеры матриц, так как в исходном варианте
   расчет занимает микросекунду.
3) Согласно https://www.kiam.ru/MVS/resourses/k10.html, на одном узле - 16 ядер и 128Gb оперативы.
   В этой задаче используют 2 матрицы double, N*N. Соотстветственно кажется разумным поставить N~=2^12, что даст нам
   2*8*2^12*2^12 ~= 256MB используемой памяти и требуемое время исполнения в 5сек-15мин. В частности, оригинальная версия
   работает порядка минуты, при N=1<<12.
   При N = 1<<13 время работы увеличивается до 6 минут, на локальной машине, так что больше ставить нет смысла.
4) Помимо прочего, код был отформатировал средствами IDE.
---
1) Взялись за версию с task.
2) Спасибо https://stackoverflow.com/questions/70712362/openmp-task-reduction-reduction-what-is-in-reduction ,
   https://hpc2n.github.io/Task-based-parallelism/branch/master/task-basics-1/ , иначе бы редукцию и прием single+taskloop
   я бы не осилил.
3) В целом, размышления про размерности массивов справедливы и здесь.
4) Также можно добавить, что внутри циклов resid и relax все операции независимы, так как мы работаем с двумя массивами,
   поэтому можно делать прямолинейную паралеллизацию DOALL, не заморачиваясь синхронизацией итераций цикла.